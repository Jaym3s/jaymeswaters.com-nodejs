var URL, core;
core = require("jsdom").dom.level3.core;
URL = require("url");
core.HTMLElement.prototype.__defineGetter__("offsetLeft", function() {
  return 0;
});
core.HTMLElement.prototype.__defineGetter__("offsetTop", function() {
  return 0;
});
core.HTMLElement.prototype.__defineGetter__("offsetWidth", function() {
  return 100;
});
core.HTMLElement.prototype.__defineGetter__("offsetHeight", function() {
  return 100;
});
core.HTMLAnchorElement.prototype._eventDefaults = {
  click: function(event) {
    var anchor;
    anchor = event.target;
    if (anchor.href) {
      return anchor.ownerDocument.parentWindow.location = anchor.href;
    }
  }
};
core.resourceLoader.load = function(element, href, callback) {
  var document, file, loaded, ownerImplementation, tagName, url, window;
  document = element.ownerDocument;
  window = document.parentWindow;
  ownerImplementation = document.implementation;
  tagName = element.tagName.toLowerCase();
  if (ownerImplementation.hasFeature('FetchExternalResources', tagName)) {
    switch (tagName) {
      case "iframe":
        return element.window.location = URL.resolve(element.window.parent.location, href);
      default:
        url = URL.parse(this.resolve(document, href));
        loaded = function(response, filename) {
          return callback.call(this, response.body, URL.parse(response.url).pathname);
        };
        if (url.hostname) {
          return window.resources.get(url, this.enqueue(element, loaded, url.pathname));
        } else {
          file = this.resolve(document, url.pathname);
          return this.readFile(file, this.enqueue(element, loaded, file));
        }
    }
  }
};
/*
core.Document.prototype._elementBuilders["iframe"] = (doc, s)->
  window = doc.parentWindow

  iframe = new core.HTMLIFrameElement(doc, s)
  iframe.window = window.browser.open(interactive: false)
  iframe.window.parent = window

  return iframe
*/
core.languageProcessors.javascript = function(element, code, filename) {
  var doc, event, line, partial, window, _i, _len, _ref;
  if (doc = element.ownerDocument) {
    window = doc.parentWindow;
    try {
      return window.run(code, filename);
    } catch (error) {
      partial = [];
      _ref = error.stack.split("\n");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (~line.indexOf(__filename)) {
          break;
        }
        partial.push(line);
      }
      partial.push("    in " + doc.location.href);
      error.stack = partial.join("\n");
      event = doc.createEvent("Event");
      event.initEvent("error", false, false);
      event.message = error.message;
      event.error = error;
      return window.dispatchEvent(event);
    }
  }
};